{
  "name": "duniapay-digital-assets-platform-api",
  "version": "0.20.0",
  "description": "This is a draft for Duniapay Digital Assets Platform API  ## Authentication  We require our partners to generate a pair of private & public keys. Partners MUST register the public key with the Platform and sign every request to our API using their private key.  We are using *HTTP Signatures* IETF draft as the base for our authentication mechanism. As the digital signature algorithm in HTTP Signatures we are using *Ed25519*.  Every HTTP request to the API MUST have following headers in addition to standard ones:  * Digest * X-Nonce * Signature  ### Digest Header  The `Digest` header ensures integrity of the HTTP request body. It MUST be constructed following the HTTP Instance Digests RFC using SHA-256 algorithm.  In case of GET request, the `Digest` header still must be constructed, assuming the request body is an empty string.  See:  * Instance Digests in HTTP <https://tools.ietf.org/html/rfc3230> * Additional Hash Algorithms for HTTP Instance Digests <https://tools.ietf.org/html/rfc5843>  Example: ``` Digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE= ```  ### X-Nonce Header  The `X-Nonce` header is supposed to uniquely identify the HTTP request and serves to protect against replay/playback attacks. The `X-Nonce` header value MUST be a string of up to 32 characters, which MUST be  unique across all the requests generated using the same API key.  As an example, `X-Nonce` header value may be generated as 16-bytes random integer in hexadecimal representation.  Example: ``` X-Nonce: 514bdd41b15f6b1a0443f8c673adc9db ```  ### Signature Header  Signature Header string is used to provide authentication and integrity assurances without the need for shared secrets. It also does not require an additional round-trip in order to authenticate the client and allows the integrity of a message to be verified independently of the transport.  Signature Parameters:  * **keyId**    Unique ID which is assigned to the Partner's API key.  * **algorithm**    The value for the `algorithm` parameter MUST be `\"hs2019\"`.  * **created**    The value of the `created` parameter MUST be the time at which   the HTTP request was constructed as an integer Unix timestamp.  * **headers**    The `headers` parameter identifies how the canonical Signature String is constructed.   Its value consists of a list of actual and pseudo- HTTP headers which will form   the Signature String according to the HTTP Signatures draft v11.    The `headers` parameter MUST include following   headers: `(request-target)`, `(created)`, `digest`, `x-nonce`.    The recommended value of the `headers` parameter is:   `(request-target) (created) digest x-nonce`.    See:    * Signature String Construction     <https://tools.ietf.org/html/draft-cavage-http-signatures-11#section-2.3>    Example of Signature String for `headers=\"(request-target) (created) digest x-nonce\"`:    ```    (request-target): get /foo?bar=123\\n   (created): 1557855475\\n   digest: SHA-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=\\n   x-nonce: 7c44d38b63f5e398af62d603b1155f5c    ```    Here `\\n` indicate the ASCII newline character. Note the absence of it on the last line.  * **signature**    The value of the `signature` parameter is the digital signature of the HTTP request produced   by the partner's private key.    In order to create the `signature` parameter:    * Construct the canonical Signature String according to the value of the `headers` parameter   * Using the private key that corresponds to the provided `keyId` generate an Ed25519     signature of the Signature String obtained on a previous step   * Base64-encode the signature  ### Examples  ``` POST /foo/bar Digest: SHA-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE= X-Nonce: 514bdd41b15f6b1a0443f8c673adc9db Signature: keyId=\"foobar\",algorithm=\"hs2019\",created=1557855475,headers=\"(request-target) (created) digest x-nonce\",signature=\"IKGyxGiUFm3luudWGkTzf0TYQD2Fnkb6ed6BTfuXuDq/U9q6gQk6KxBSPx33ME1O2RLlH5HKG2WZnO8PgRGiDA==\"  {\"hello\": \"world\"} ```  ``` GET /foo?bar=123 Digest: SHA-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU= X-Nonce: 7c44d38b63f5e398af62d603b1155f5c Signature: keyId=\"foobar\",algorithm=\"hs2019\",created=1557855475,headers=\"(request-target) (created) digest x-nonce\",signature=\"d0Wzjlpt2Y++DJtxKnD1ipkkwF5eU43jwtybqsy3tFqa5P3kYYIJa4TTQyMUZ62i58jwN7gK6q2MVJBDGQ6tDg==\" ```  See:  * HTTP Signatures, <https://tools.ietf.org/html/draft-cavage-http-signatures-11> * Ed25519, <https://ed25519.cr.yp.to/>  -- ",
  "main": "index.js",
  "scripts": {
    "prestart": "npm install",
    "start": "node index.js"
  },
  "keywords": [
    "openapi-generator",
    "openapi"
  ],
  "license": "Unlicense",
  "private": true,
  "dependencies": {
    "body-parser": "^1.19.0",
    "camelcase": "^5.3.1",
    "cookie-parser": "^1.4.4",
    "cors": "^2.8.5",
    "express": "^4.16.4",
    "express-openapi-validator": "^3.9.1",
    "js-yaml": "^3.3.0",
    "ono": "^5.0.1",
    "openapi-sampler": "^1.0.0-beta.15",
    "swagger-ui-express": "^4.0.2",
    "winston": "^3.2.1"
  },
  "devDependencies": {
    "axios": "^0.19.0",
    "chai": "^4.2.0",
    "chai-as-promised": "^7.1.1",
    "eslint": "^5.16.0",
    "eslint-config-airbnb-base": "^14.0.0",
    "eslint-plugin-import": "^2.17.2",
    "mocha": "^7.1.1"
  },
  "eslintConfig": {
    "env": {
      "node": true
    }
  }
}
